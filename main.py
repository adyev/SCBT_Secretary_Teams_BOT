from bot.bot import Bot
from bot.handler import MessageHandler
from bot.handler import BotButtonCommandHandler
from bot.bot import Event
import json
import schedule
from schedule import every
import time
from multiprocessing import Process
import multiprocessing as mp
from threading import Thread
import datetime
import config
import psycopg2
from psycopg2.extras import DictCursor
from SQL_funcs import get_user, get_not_senders_by_hour, add_user, set_silence, shift_time_diff, add_sender, senders_reset, get_not_senders
from config import  city_callback_to_city, city_to_time, time_callback_to_offset
from registration import register


TOKEN = config.SKBT_SECRETARY_TOKEN #your token here
CHAT_ID = config.SKB_CHAT_ID
SAA_CHAT_ID = '110869@chat.agent'
#CHAT_ID = '83665@chat.agent' #—Ç–µ—Å—Ç–æ–≤—ã–π




def send_menu(bot : Bot, user_id : str):
    buttons = [[
        {"text":"üíª –í—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã", "callbackData":"call_back_workplace", "style": "primary"}
    ]]
    user = get_user(user_id=user_id)
    print (user)
    silensed_text = ''
    if (user['SILENCED']):
        silensed_text = '‚úÖ –í–∫–ª—é—á–∏—Ç—å'
    else:
        silensed_text = 'üö´ –í—ã–∫–ª—é—á–∏—Ç—å'
    buttons[0].append({"text": silensed_text, "callbackData":"call_back_silenced_switch", "style": "primary"})
    bot.send_text(text='–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?', 
                  chat_id=user_id, 
                  inline_keyboard_markup='{}'.format(json.dumps(buttons)))




def send_workplace_choice(bot: Bot, chat_id: str):
    user_groop = get_user(user_id=chat_id)['GROOP']
    if (user_groop == 'RPI'):
        bot.send_text(chat_id=chat_id, text="–ì–¥–µ —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞–µ—à—å?", inline_keyboard_markup="{}".format(json.dumps([[
                {"text":"üíº –û—Ñ–∏—Å", "callbackData":"call_back_office", "style": "primary"},
                {"text":"üè° –ò–∑ –¥–æ–º–∞", "callbackData":"call_back_home", "style": "primary"}
            ]])))
    else:
        bot.send_text(chat_id=chat_id, text="–ì–¥–µ —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞–µ—à—å?", inline_keyboard_markup="{}".format(json.dumps([[
                {"text":"üíº –û—Ñ–∏—Å", "callbackData":"call_back_office", "style": "primary"},
                {"text":"üè° –ò–∑ –¥–æ–º–∞", "callbackData":"call_back_home", "style": "primary"},
                {"text":"üåö –ù–∞ –ª—É–Ω–µ", "callbackData":"call_back_moon", "style": "primary"}
            ]])))

def message_check(bot : Bot, event : Event):
    commands_list = ['/menu', '/help', '/start', '/setWorkTime', '/gimmeChatId', '/report'] 
    if (event.text in commands_list):
        if(event.text =='/gimmeChatId'):
            print (event.from_chat)
        if (event.chat_type == 'private'):
            if(event.text == '/menu'):
                send_menu(bot, event.from_chat)
            if(event.text == '/start'):
                print (f"start command")
                register(bot=bot, event=event)
            if(event.text =='/setWorkTime'):
                send_time_shift_choice(bot=bot, event=event)
            if(event.text == '/report'):
                send_report()
            
        
        else:
            bot.send_text(text='<b>–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º –≤–Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–æ!</b>', chat_id=event.from_chat, parse_mode='HTML')

def send_time_shift_choice(bot: Bot, event: Event):
    print ("time shift")
    user = get_user(user_id=event.from_chat)
    if (len(user) == 0):
        bot.send_text(text='–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start', chat_id=event.from_chat)
    else:
        buttons = [
           [{"text":"08:00", "callbackData":"call_back_time_8", "style": "primary"}],
           [{"text":"09:00", "callbackData":"call_back_time_9", "style": "primary"}],
           [{"text":"10:00", "callbackData":"call_back_time_10", "style": "primary"}]
        ]
        bot.send_text(text='–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã', 
                  chat_id=event.from_chat, 
                  inline_keyboard_markup='{}'.format(json.dumps(buttons)))
    pass

def send_choice_in_chat(bot: Bot, place: str, event: Event):
    date = datetime.datetime.now().strftime("%d.%m.%Y")
    user = get_user(user_id=event.from_chat)
    print('–ò–º—è\n–î–∞—Ç–∞ ' + place + ' #—Ä–∞–±–æ—Ç–∞')
    sender = " ".join([event.data['from']['lastName'], event.data['from']['firstName']])
    if (user['GROOP'] == 'RPI'):
        bot.send_text(text=f'#{sender}\n{date} ' + place + ' #—Ä–∞–±–æ—Ç–∞', chat_id=CHAT_ID)
    else:
        bot.send_text(text=f'#{sender}\n{date} ' + place + ' #—Ä–∞–±–æ—Ç–∞', chat_id=SAA_CHAT_ID)
    add_sender(user_id=event.from_chat)



def buttons_func(bot : Bot, event : Event):
    print (event)
    #–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã
    if (event.data['callbackData'] == 'call_back_workplace'):
       send_workplace_choice(bot=bot, chat_id=event.from_chat) 

    #–í—ã–±—Ä–∞–ª –≤ –æ—Ñ–∏—Å–µ
    if (event.data['callbackData'] == 'call_back_office'):       
        send_choice_in_chat(bot=bot, place='üíº –û—Ñ–∏—Å', event=event)
        bot.send_text(text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç!', chat_id=event.from_chat)
        
    
    #–í—ã–±—Ä–∞–ª –∏–∑ –¥–æ–º–∞
    if (event.data['callbackData'] == 'call_back_home'):       
        send_choice_in_chat(bot=bot, place='üè° –ò–∑ –¥–æ–º–∞', event=event)
        bot.send_text(text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç!', chat_id=event.from_chat)

    #–í—ã–±—Ä–∞–ª –Ω–∞ –õ—É–Ω–µ
    if (event.data['callbackData'] == 'call_back_moon'):       
        send_choice_in_chat(bot=bot, place='üåö –ù–∞ –ª—É–Ω–µ', event=event)
        bot.send_text(text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç!', chat_id=event.from_chat)

    #–ö–Ω–æ–ø–∫–∞ on/off
    if (event.data['callbackData'] == 'call_back_silenced_switch'):
        user = get_user(user_id=event.from_chat)
        print (f'chat ID: {event.from_chat}\n')
        new_buttons = [[
            {"text":"üíª –í—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã", "callbackData":"call_back_workplace", "style": "primary"}
        ]]
        if (user['SILENCED']):
            set_silence(user_id=event.from_chat, value=False)
            bot.send_text(text='–†–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞!', chat_id=event.from_chat)
            new_buttons[0].append({"text": 'üö´ –í—ã–∫–ª—é—á–∏—Ç—å', "callbackData":"call_back_silenced_switch", "style": "primary"})
        else:
            set_silence(user_id=event.from_chat, value=True)
            bot.send_text(text='–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞!', chat_id=event.from_chat)
            new_buttons[0].append({"text": '‚úÖ –í–∫–ª—é—á–∏—Ç—å', "callbackData":"call_back_silenced_switch", "style": "primary"})
        bot.edit_text(inline_keyboard_markup=new_buttons, msg_id=event.data['message']['msgId'], chat_id=event.from_chat, text='–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?')
        #print(event.data['message']['msgId'])
     
    #–í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –≤–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if (event.data['callbackData'] in ['call_back_city_NSK', 'call_back_city_HBR', 'call_back_city_SRT', 'call_back_city_MSK']): 
        print ("City selected")
        user = get_user(user_id=event.from_chat)
        if (len(user) != 0):
            bot.send_text(
                text = f'–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! '
                       f'–ï—Å–ª–∏ –≤—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /setWorkTime', 
                chat_id = event.from_chat
            )
        else:
            city = city_callback_to_city[event.data['callbackData']]
            add_user(
                name=" ".join([event.data['from']['lastName'], event.data['from']['firstName']]), 
                chat_id=event.from_chat, 
                diff=city_to_time[city],
                city=city
            )
            bot.send_text(
                    text = f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –º–µ—Å—Ç–µ —Ä–∞–±–æ—Ç—ã —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ 09:00 –≥–æ—Ä–æ–¥–∞ {city}! '
                           f'–ï—Å–ª–∏ –≤—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /setWorkTime', 
                    chat_id = event.from_chat
            )
    
    #–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
    if (event.data['callbackData'] in ['call_back_time_8', 'call_back_time_9', 'call_back_time_10']): 
        user = get_user(event.from_chat)
        if (len(user) == 0):
            bot.send_text(text='–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start', chat_id=event.from_chat)
        else:
            city = user['CITY']
            city_time = city_to_time[city]
            new_time_diff = city_time - time_callback_to_offset[event.data['callbackData']]
            shift_time_diff(new_time_diff=new_time_diff, user_id=event.from_chat)
            bot.send_text(text='–í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!', chat_id=event.from_chat)
        pass


def send_report():
    week_day = datetime.datetime.now().weekday()
    if (week_day < 5):
        bot = Bot(token=TOKEN)
        users = get_not_senders()
        msg_SaA_text = '#REPORT\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –Ω–µ —Å–æ–æ–±—â–∏–≤—à–∏–µ –æ –º–µ—Å—Ç–µ —Ä–∞–±–æ—Ç—ã —Å–µ–≥–æ–¥–Ω—è:\n'
        msg_RPI_text = '#REPORT\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –Ω–µ —Å–æ–æ–±—â–∏–≤—à–∏–µ –æ –º–µ—Å—Ç–µ —Ä–∞–±–æ—Ç—ã —Å–µ–≥–æ–¥–Ω—è:\n'
        for user in users:
            if (user['TEAMS_ID'] != config.BOSS_ID):
                if user['GROOP'] == 'SaA':
                    msg_SaA_text += user['NAME'] + '\n'
                else:
                    msg_RPI_text += user['NAME'] + '\n'
        bot.send_text(text=msg_RPI_text, chat_id=CHAT_ID)
        bot.send_text(text=msg_SaA_text, chat_id=SAA_CHAT_ID)


def start_schedule():
    print ("Schedule started")
    every().hour.at(":00").do(daily_question)
    every().day.at("00:00").do(senders_reset)
    every().day.at("13:00").do(send_report)
    while (True):
        schedule.run_pending()
        time.sleep(1)
   

def daily_question():
    bot = Bot(token=TOKEN)
    hour = datetime.datetime.now().hour
    week_day = datetime.datetime.now().weekday()
    if (week_day < 5):
        users = get_not_senders_by_hour(16 - hour)
        print(users)
        for user in users:
            if(not user['SILENCED']):
                send_workplace_choice(bot=bot, chat_id=user['TEAMS_ID'])
    

#------------------------------------------------------------------------------------------------



def main():
    bot = Bot(token=TOKEN)
    print (bot)
    bot.dispatcher.add_handler(MessageHandler(callback=message_check))
    bot.dispatcher.add_handler(BotButtonCommandHandler(callback=buttons_func))
    thread = Thread(target=start_schedule)
    thread.start()
    bot.start_polling()
    bot.idle()



if __name__ == '__main__':
    main()